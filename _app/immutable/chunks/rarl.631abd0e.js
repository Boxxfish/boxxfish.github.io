import{S as km,i as Mm,s as _m,k as e,q as n,a as h,l as i,m as r,r as l,h as a,c,n as p,Q as N,b as o,E as t,K as cl}from"./index.d68af908.js";function Em(yr){let W,ds,Me,_e,gt,O,C,Qa,Ee,ft,Q,ze,Za,Le,Ae,vt,bs,Te,wt,Z,ul,yt,xs,Pe,bt,K,Ne,Ka,Re,je,xt,U,Se,Ua,Ie,He,kt,V,J,Va,qe,Mt,ks,Ja,Ge,_t,T,Be,Xa,Fe,We,gs,De,Oe,fs,Ce,Qe,Et,Ms,Ze,zt,X,Ke,Ya,Ue,Ve,Lt,_s,$a,Je,At,Y,Xe,vs,Ye,$e,Tt,R,sn,ws,an,tn,st,en,nn,Pt,$,ss,at,ln,Nt,Es,rn,Rt,f,pn,zs,br='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>',mn,Ls,xr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Q(s, a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Q</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',on,As,kr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>',hn,tt,cn,un,Ts,Mr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>',dn,et,gn,fn,jt,as,dl,St,k,vn,Ps,_r='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>',wn,Ns,Er='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>',yn,Rs,zr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>',bn,nt,xn,kn,It,js,Mn,Ht,ts,gl,qt,y,_n,Ss,Lr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>',En,Is,Ar='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>',zn,Hs,Tr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>',Ln,qs,Pr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>',An,it,Tn,Pn,Gt,es,fl,Bt,Gs,Nn,Ft,M,Rn,Bs,Nr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">x_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',jn,Fs,Rr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Sn,Ws,jr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>',In,Ds,Sr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>a</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, a, r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>',Hn,Wt,u,qn,lt,Gn,Bn,Os,Ir='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>',Fn,Cs,Hr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>',Wn,Qs,qr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">h_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Dn,Zs,Gr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>s</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>s</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(s_1, s_2, ... s_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',On,Ks,Br='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">b_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Cn,Us,Fr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>l</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mrow><mi>l</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>s</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(s_l, s_{l-1}, ... s_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Qn,Vs,Wr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext mathvariant="bold">s</mtext><mo separator="true">,</mo><mtext mathvariant="bold">h</mtext><mo separator="true">,</mo><mtext mathvariant="bold">b</mtext><mo separator="true">,</mo><mi>a</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x, \\textbf{s}, \\textbf{h}, \\textbf{b}, a, r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord textbf">s</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord textbf">h</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord textbf">b</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span>',Zn,Dt,ns,vl,Ot,Js,Kn,Ct,_,Un,Xs,Dr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">m_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Vn,Ys,Or='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">m_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Jn,rt,Xn,Yn,pt,$n,si,Qt,v,ai,$s,Cr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">m^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span>',ti,sa,Qr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mover accent="true"><mi>m</mi><mo>^</mo></mover><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">\\hat{m}^k_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1555em;vertical-align:-0.3064em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">m</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3064em;"><span></span></span></span></span></span></span></span></span></span>',ei,aa,Zr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">m_{t-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>',ni,ta,Kr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>',ii,ea,Ur='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mrow><mi>q</mi><mi>u</mi><mi>e</mi><mi>r</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{query}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">ery</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',li,na,Vr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>q</mi><mi>t</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">q^k_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>',ri,Zt,is,wl,Kt,E,pi,ia,Jr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>',mi,la,Xr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">k_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',oi,ra,Yr='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>',hi,pa,$r='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>',ci,Ut,ls,yl,Vt,rs,bl,Jt,j,ui,ma,sp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">d_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',di,oa,ap='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>',gi,Xt,ps,xl,Yt,ha,fi,$t,ms,kl,se,z,vi,mt,wi,yi,ca,tp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span>',bi,ot,xi,ki,ua,ep='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi></mrow><annotation encoding="application/x-tex">g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>',Mi,ae,da,_i,te,S,Ei,ga,np='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>Z</mi><mi mathvariant="normal">∣</mi><mi>g</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(Z|g)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mclose">)</span></span></span></span>',zi,fa,ip='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>Z</mi><mi mathvariant="normal">∣</mi><msub><mi>m</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(Z|m_{t-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Li,ee,d,Ai,ys,Ti,Pi,va,lp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>',Ni,wa,rp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>',Ri,ya,pp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>',ji,ht,Si,Ii,ba,mp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>',Hi,xa,op='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>',qi,ne,os,Ml,ie,D,ka,hp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>',Gi,Ma,cp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mover accent="true"><mi>m</mi><mo>~</mo></mover><mi>t</mi><mi>k</mi></msubsup><mo>←</mo><msubsup><mover accent="true"><mi>m</mi><mo>^</mo></mover><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></msubsup><mo>+</mo><msubsup><mi>z</mi><mi>t</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">\\tilde{m}^k_t \\leftarrow \\hat{m}^k_{t-1} + z^k_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">m</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1555em;vertical-align:-0.3064em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">m</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3064em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>',Bi,le,g,Fi,_a,up='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>z</mi><mi>t</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">z^k_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>',Wi,Ea,dp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Di,za,gp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>z</mi><mi>t</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">z^k_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>',Oi,La,fp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Ci,Aa,vp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>z</mi><mi>t</mi><mi>k</mi></msubsup></mrow><annotation encoding="application/x-tex">z^k_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0961em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-2.453em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span>',Qi,Ta,wp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>u</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">u_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Zi,Pa,yp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>s</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">s_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Ki,re,hs,cs,ct,Ui,pe,Na,Vi,me,Ra,Ji,oe,ja,Xi,he,Sa,Yi,ce,Ia,$i,ue,Ha,sl,de,qa,al,ge,Ga,tl,fe,Ba,el,ve,I,nl,ut,il,ll,Fa,bp='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mrow><mi>s</mi><mi>l</mi><mi>o</mi><mi>t</mi><mi>s</mi></mrow></msub><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">N_{slots} * k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>',rl;return{c(){W=e("p"),ds=e("a"),Me=n("“Retrieval Augmented Reinforcement Learning”"),_e=n(` is a paper that I’ve been meaning to really get into for a while now.
As far as I’m aware, it’s currently the only paper that really addresses how to both learn to retrieve and act at the same time.
Because there’s a lot of stuff going on in the paper, I found some of the details (particularly the implementation) a bit difficult to parse, so I’ve put together some notes outlining how the various pieces come together.`),gt=h(),O=e("h2"),C=e("a"),Qa=e("span"),Ee=n("Motivation"),ft=h(),Q=e("p"),ze=n(`Before we dive into the details, though, let’s discuss what problem we’re trying to solve, and why.
Typically in reinforcement learning, we distill the outcomes of thousands of episodes worth of experience into a fixed, parametric model (e.g. a neural network).
While this has been shown to work for a large number of problems, there’s an argument that can be made that it’s not the most `),Za=e("em"),Le=n("efficient"),Ae=n(" way we can use experience."),vt=h(),bs=e("p"),Te=n(`For example, consider the task of learning to play the first level of Super Mario Bros.
Aside from the inherent challenges of platforming, the player must also learn how to deal with enemies encountered along the way.
On your first brush with a Goomba, you might try running into it and find that you instantly die.
Afterwards, you might try to avoid it by jumping around it, but that’s still tricky and can be an error prone strategy.
Finally, you might try jumping directly on its head, and find that this gets rid of the Goomba entirely, and nets you some points in the process.
Based on that one experience, you now know how to deal with every Goomba you encounter from here on out.`),wt=h(),Z=e("img"),yt=h(),xs=e("p"),Pe=n(`Now imagine how an RL agent would deal with this task.
The agent would have to “see” the outcomes of Mario touching a Goomba hundreds of times before it understands that it has to be beaten by jumping on its head, since it has no ability to query past experience, i.e. long term memory.
What takes a five year old human less than an hour to master can take well over a day for an RL agent to beat.`),bt=h(),K=e("p"),Ne=n("Aside from being data inefficient, the traditional RL paradigm is also "),Ka=e("em"),Re=n("parameter"),je=n(` inefficient.
All experience that can influence an agent’s behavior must be distilled into a network’s weights.
If solving a task requires understanding how to deal with a large number of unique enemies (as in Super Mario Bros.), all of that information has to be stored in the weights, which can results in really big models.`),xt=h(),U=e("p"),Se=n(`To combat these inefficiencies, this paper explores an alternative paradigm, where past experience is encoded offline and queried at runtime to improve value estimates of actions.
Basically, given a dataset of past experience, the agent can learn during training to retrieve relevant trajectories and act upon them.
This is similar to the way we just described how a human beats Super Mario Bros., and the benefit is clear — rather than using experience purely for training the model, you can also use it to `),Ua=e("em"),Ie=n("inform"),He=n(" the model of good actions to take at runtime."),kt=h(),V=e("h2"),J=e("a"),Va=e("span"),qe=n("Related Work/Context"),Mt=h(),ks=e("p"),Ja=e("strong"),Ge=n("Episodic RL"),_t=h(),T=e("p"),Be=n(`This is not the first time RL researchers have tried using past trajectories to improve a policy’s performance outside of training.
The general family of techniques is called `),Xa=e("em"),Fe=n("episodic RL"),We=n(`, named after episodic memory from cognitive psychology.
The papers `),gs=e("a"),De=n("“Model Free Episodic Control”"),Oe=n(" and "),fs=e("a"),Ce=n("“Neural Episodic Control”"),Qe=n(" both explore these ideas."),Et=h(),Ms=e("p"),Ze=n(`Traditionally, you query previously seen trajectories by their similar to the current state, then use a weighted average of the returns to predict the current return.
It’s a bit like model-based tree search, except instead of simulating future trajectories to estimate action returns, you take previously seen trajectories and use their returns to estimate action returns.`),zt=h(),X=e("p"),Ke=n(`A big difference between previous episodic RL approaches and this paper is that the approach outlined here allows the agent itself to determine how retrieved information is used.
Rather than directly using the past returns, the agent instead learns to use the `),Ya=e("em"),Ue=n("information"),Ve=n(" present in retrieved trajectories."),Lt=h(),_s=e("p"),$a=e("strong"),Je=n("Retrieval Augmented Generation"),At=h(),Y=e("p"),Xe=n("The paper also cites the recent trend of "),vs=e("a"),Ye=n("retrieval augmented generation"),$e=n(` (RAG) as an inspiration.
If you’re reading this post, chances are, you probably already know what RAG is.
For completeness, the quick version of it is that a system (usually some kind of chatbot) receives a query, retrieves the most relevant passages for that query, then passes in both the query and retrieved passages to a language model to generate the final answer.
Because of that retrieval step, not only does the language model not have to memorize a ton of information, but responses also tend to be more factually accurate.`),Tt=h(),R=e("p"),sn=n("RAG systems tend to learn to retrieve first (e.g. by training a retrieval model on "),ws=e("a"),an=n("MS MARCO"),tn=n("), "),st=e("em"),en=n("then"),nn=n(` learn to generate responses based on that information.
In contrast, this paper learns both how to retrieve and how to act at the same time, which is more difficult, but also more interesting.`),Pt=h(),$=e("h2"),ss=e("a"),at=e("span"),ln=n("The Approach"),Nt=h(),Es=e("p"),rn=n("Let’s construct this system, piece by piece."),Rt=h(),f=e("p"),pn=n("A DQN takes in a state "),zs=e("span"),mn=n(" and outputs the expected return for each action, "),Ls=e("span"),on=n(`.
The paper slightly modifies this and adds an encoder, which converts input/observation `),As=e("span"),hn=n(" into "),tt=e("em"),cn=n("internal"),un=n(" state "),Ts=e("span"),dn=n(`.
The encoder can be anything appropriate for processing the input, for instance, a ResNet for images.
This setup forms the `),et=e("em"),gn=n("agent process"),fn=n("."),jt=h(),as=e("img"),St=h(),k=e("p"),vn=n(`Next, we need something for the agent to retrieve from.
The paper describes `),Ps=e("span"),wn=n(", a dataset of "),Ns=e("span"),yn=n("-step trajectories, where "),Rs=e("span"),bn=n(` is at least 1.
Each trajectory consists of input, action, and reward tuples, similar to the makeup of an experience buffer.
I’ll be calling these tuples `),nt=e("em"),xn=n("transitions"),kn=n(" throughout the post, even though I’m abusing the terminology a little."),It=h(),js=e("p"),Mn=n("Oddly, the action and reward in each transition doesn’t seem to actually be used, at least from their description of the algorithm."),Ht=h(),ts=e("img"),qt=h(),y=e("p"),_n=n(`We need another process to actually perform retrieval.
This process is a recurrent network that takes in the current (internal) state `),Ss=e("span"),En=n(", does a round of retrieval, and outputs a summary of the items it retrieved in the form of "),Is=e("span"),zn=n(`.
`),Hs=e("span"),Ln=n(` is sent to the agent process, causing its actions to be conditioned on both the state and retrieved items.
The network also updates its hidden state `),qs=e("span"),An=n(`, allowing information from previous rounds of retrieval to impact future retrievals.
This whole process forms the `),it=e("em"),Tn=n("retrieval process"),Pn=n("."),Gt=h(),es=e("img"),Bt=h(),Gs=e("p"),Nn=n("Let’s dive deeper into the retrieval process."),Ft=h(),M=e("p"),Rn=n("We’ll start by assuming the agent process has already encoded some input "),Bs=e("span"),jn=n(" as "),Fs=e("span"),Sn=n(` and passed it to the retrieval process.
Retrieval starts by uniformly sampling trajectories from our dataset, forming a sample batch.
As previously discussed, each trajectory consists of `),Ws=e("span"),In=n(" tuples of the form "),Ds=e("span"),Hn=n(" (i.e. (input, action, reward))."),Wt=h(),u=e("p"),qn=n("Before we actually retrieve from this batch, the trajectories are augmented with additional information through the use of "),lt=e("em"),Gn=n("summary functions"),Bn=n(`.
These functions, implemented as RNNs, take in a sequence of encoded inputs, thus we first apply our encoder on all transition inputs to produce `),Os=e("span"),Fn=n(`.
For timestep `),Cs=e("span"),Wn=n(" in the trajectory, the forward summarizer produces "),Qs=e("span"),Dn=n(" from "),Zs=e("span"),On=n(`.
The backward summarizer produces `),Ks=e("span"),Cn=n(" from "),Us=e("span"),Qn=n(`, going in the opposite direction.
Once these summarizers are run on each transition, they are of the form `),Vs=e("span"),Zn=n("."),Dt=h(),ns=e("img"),Ot=h(),Js=e("p"),Kn=n("At this point, we can actually perform retrieval!"),Ct=h(),_=e("p"),Un=n("Previously, we mentioned that our recurrent retrieval model updates an internal state "),Xs=e("span"),Vn=n(` on each timestep.
`),Ys=e("span"),Jn=n(" is not a single vector, but rather a "),rt=e("em"),Xn=n("series"),Yn=n(" of vectors we call "),pt=e("em"),$n=n("memory slots"),si=n("."),Qt=h(),v=e("p"),ai=n("For each slot "),$s=e("span"),ti=n(", we use a GRU to generate a prestate "),sa=e("span"),ei=n(", using the previous retrieval state "),aa=e("span"),ni=n(" and the current agent state "),ta=e("span"),ii=n(` as inputs.
These prestates are used to compute a query for each slot by simply running them through another network `),ea=e("span"),li=n(" to produce "),na=e("span"),ri=n("."),Zt=h(),is=e("img"),Kt=h(),E=e("p"),pi=n("We compute keys by linearly projecting each forward summary "),ia=e("span"),mi=n(", forming keys "),la=e("span"),oi=n(", where "),ra=e("span"),hi=n(" is the trajectory and "),pa=e("span"),ci=n(" is the timestep within the trajectory."),Ut=h(),ls=e("img"),Vt=h(),rs=e("img"),Jt=h(),j=e("p"),ui=n(`Each transition is scored by applying the scaled dot product between each key and query to produce a logit, then using softmax on the logits to compute attention weights.
For those unfamiliar, `),ma=e("span"),di=n(" is just the dimensionality of "),oa=e("span"),gi=n("."),Xt=h(),ps=e("img"),Yt=h(),ha=e("p"),fi=n("Each trajectory can now be scored by summing the scores of each of its constituent transitions."),$t=h(),ms=e("img"),se=h(),z=e("p"),vi=n(`We select the top-k highest trajectories for each memory slot.
The transition scores are renormalized to account for the smaller set, i.e. the softmax is reapplied to the logits of our top-k trajectories’ transitions.
Then, we compute the value of the slot by multiplying the `),mt=e("em"),wi=n("backward"),yi=n(" summary ("),ca=e("span"),bi=n(") of each transition with a weight matrix (similar to the keys), multiplying "),ot=e("em"),xi=n("that"),ki=n(" with the renormalized scores, then summing up these vectors, producing "),ua=e("span"),Mi=n(` for each memory slot.
All in all, this is just cross attention, with the queries as queries, the forward summaries as keys, and the backward summaries as values.`),ae=h(),da=e("p"),_i=n("At this point, we have a set of values that we’ve retrieved, one for each memory slot."),te=h(),S=e("p"),Ei=n("The authors parameterize two gaussian distributions — "),ga=e("span"),zi=n(", which is conditioned on the memory slot’s retrieved information, and "),fa=e("span"),Li=n(", which is only conditioned on the previous state of the memory slot."),ee=h(),d=e("p"),Ai=n("It looks like they essentially use the same trick as "),ys=e("a"),Ti=n("variational autoencoders"),Pi=n(", where for a given input, a "),va=e("span"),Ni=n(` dimensional vector of means and standard deviations are generated, which are then used to sample values.
`),wa=e("span"),Ri=n(", sampled from "),ya=e("span"),ji=n(", is what we’re gonna use to update our slots, but we don’t want it to contain "),ht=e("em"),Si=n("too"),Ii=n(` much information.
To accomplish this, the authors perform regularization by minimizing the KL divergence between the distributions generated by `),ba=e("span"),Hi=n(" and "),xa=e("span"),qi=n("."),ne=h(),os=e("img"),ie=h(),D=e("p"),ka=e("span"),Gi=n(" is then used to update the slots’ representations by adding it to the prestates, "),Ma=e("span"),Bi=n(`.
To get the final new representation of each slot, self attention is performed between slots, allowing them to share information.`),le=h(),g=e("p"),Fi=n("Finally, we need to update our state with retrieved information "),_a=e("span"),Wi=n(`.
A cross attention operation is performed between the state `),Ea=e("span"),Di=n(" and "),za=e("span"),Oi=n(`.
`),La=e("span"),Ci=n(" is used to compute the query, while "),Aa=e("span"),Qi=n(` is used to compute the keys and values (i.e. via linear projection).
The resulting value, `),Ta=e("span"),Zi=n(", is added to "),Pa=e("span"),Ki=n(", which is then passed to the agent so it can act upon it."),re=h(),hs=e("h2"),cs=e("a"),ct=e("span"),Ui=n("Conclusion"),pe=h(),Na=e("p"),Vi=n(`The big strength of the approach outlined here is that compared to a lot of episodic RL approaches, you’re being less prescriptive about the relevance criteria and how retrieved information is used.
Instead of scoring past trajectories by state similarity, the networks themselves learn to retrieve and act upon the retrieved information.`),me=h(),Ra=e("p"),Ji=n(`In terms of the paper itself, I also found the experiments and ablations the authors performed to be thorough.
They tested RARL on three tasks — Atari, Gridroboman, and BabyAI.`),oe=h(),ja=e("p"),Xi=n("On Atari, they showed that RARL agents show performance gains over a standard R2D2 setup. Some of these performance gains were particularly big, such as on Frostbite, where they saw a ~200% improvement."),he=h(),Sa=e("p"),Yi=n("On Gridroboman (a multi-task, fully observable gridworld environment where an agent must complete various tasks involving picking up and putting down boxes), they showed that RARL agents can be trained on multiple tasks and are able to disambiguate tasks based on the retrieval dataset provided."),ce=h(),Ia=e("p"),$i=n(`Finally, on BabyAI (a partially observable multi-task gridworld), they showed that even when trajectories from all tasks are provided in the retrieval dataset, RARL agents still improve over baseline R2D2 agents.
This is in part chalked up to RARL being able to retrieve data from atomic tasks in order to solve more compositional tasks.`),ue=h(),Ha=e("p"),sl=n("While I think this is an important paper for people studying the intersection of information retrieval and reinforcement learning, I do think there are a couple of issues, some personal."),de=h(),qa=e("p"),al=n("First, I would have preferred not R2D2 at all. I feel like memory-based agents overlap with retrieval-based agents in function, and using something like a DQN would have made the results more clear, particularly for Atari. I do appreciate that Gridroboman used just a DQN for this reason."),ge=h(),Ga=e("p"),tl=n("Similarly, I’m not a big fan of how the retrieval process is an RNN whose state is dependent on prior retrievals. It makes the proposed approach less clean; I would have preferred a more straightforward mapping of current states to previous trajectories."),fe=h(),Ba=e("p"),el=n(`Finally, while the approach outlined here does improve over baseline DQN and R2D2 agents, this is more akin to attention over past trajectories rather than true retrieval.
To make the problem tractable, the authors uniformly sample from the full retrieval dataset, but I suspect this leads to poor recall and final performance if the ratio of relevant trajectories to irrelevant trajectories is very small.
This kind of relevance ratio is standard for most retrieval problems — for example, the dev set of MS MARCO designates one passage out of 8.8 million as relevant.`),ve=h(),I=e("p"),nl=n("Additionally, rather than ranking individual trajectories, this approach operates on an entire "),ut=e("em"),il=n("batch"),ll=n(" of retrieved information (you have different slots, and each slot queries its own top-k set of trajectories, allowing the network to integerate data from "),Fa=e("span"),rl=n(` number of trajectories).
Ideally, the approach should work even when using 1 slot and greedily selecting the best piece of information.`),this.h()},l(s){W=i(s,"P",{});var m=r(W);ds=i(m,"A",{href:!0,rel:!0});var _l=r(ds);Me=l(_l,"“Retrieval Augmented Reinforcement Learning”"),_l.forEach(a),_e=l(m,` is a paper that I’ve been meaning to really get into for a while now.
As far as I’m aware, it’s currently the only paper that really addresses how to both learn to retrieve and act at the same time.
Because there’s a lot of stuff going on in the paper, I found some of the details (particularly the implementation) a bit difficult to parse, so I’ve put together some notes outlining how the various pieces come together.`),m.forEach(a),gt=c(s),O=i(s,"H2",{id:!0});var pl=r(O);C=i(pl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var El=r(C);Qa=i(El,"SPAN",{class:!0}),r(Qa).forEach(a),El.forEach(a),Ee=l(pl,"Motivation"),pl.forEach(a),ft=c(s),Q=i(s,"P",{});var we=r(Q);ze=l(we,`Before we dive into the details, though, let’s discuss what problem we’re trying to solve, and why.
Typically in reinforcement learning, we distill the outcomes of thousands of episodes worth of experience into a fixed, parametric model (e.g. a neural network).
While this has been shown to work for a large number of problems, there’s an argument that can be made that it’s not the most `),Za=i(we,"EM",{});var zl=r(Za);Le=l(zl,"efficient"),zl.forEach(a),Ae=l(we," way we can use experience."),we.forEach(a),vt=c(s),bs=i(s,"P",{});var Ll=r(bs);Te=l(Ll,`For example, consider the task of learning to play the first level of Super Mario Bros.
Aside from the inherent challenges of platforming, the player must also learn how to deal with enemies encountered along the way.
On your first brush with a Goomba, you might try running into it and find that you instantly die.
Afterwards, you might try to avoid it by jumping around it, but that’s still tricky and can be an error prone strategy.
Finally, you might try jumping directly on its head, and find that this gets rid of the Goomba entirely, and nets you some points in the process.
Based on that one experience, you now know how to deal with every Goomba you encounter from here on out.`),Ll.forEach(a),wt=c(s),Z=i(s,"IMG",{src:!0,alt:!0,class:!0}),yt=c(s),xs=i(s,"P",{});var Al=r(xs);Pe=l(Al,`Now imagine how an RL agent would deal with this task.
The agent would have to “see” the outcomes of Mario touching a Goomba hundreds of times before it understands that it has to be beaten by jumping on its head, since it has no ability to query past experience, i.e. long term memory.
What takes a five year old human less than an hour to master can take well over a day for an RL agent to beat.`),Al.forEach(a),bt=c(s),K=i(s,"P",{});var ye=r(K);Ne=l(ye,"Aside from being data inefficient, the traditional RL paradigm is also "),Ka=i(ye,"EM",{});var Tl=r(Ka);Re=l(Tl,"parameter"),Tl.forEach(a),je=l(ye,` inefficient.
All experience that can influence an agent’s behavior must be distilled into a network’s weights.
If solving a task requires understanding how to deal with a large number of unique enemies (as in Super Mario Bros.), all of that information has to be stored in the weights, which can results in really big models.`),ye.forEach(a),xt=c(s),U=i(s,"P",{});var be=r(U);Se=l(be,`To combat these inefficiencies, this paper explores an alternative paradigm, where past experience is encoded offline and queried at runtime to improve value estimates of actions.
Basically, given a dataset of past experience, the agent can learn during training to retrieve relevant trajectories and act upon them.
This is similar to the way we just described how a human beats Super Mario Bros., and the benefit is clear — rather than using experience purely for training the model, you can also use it to `),Ua=i(be,"EM",{});var Pl=r(Ua);Ie=l(Pl,"inform"),Pl.forEach(a),He=l(be," the model of good actions to take at runtime."),be.forEach(a),kt=c(s),V=i(s,"H2",{id:!0});var ml=r(V);J=i(ml,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nl=r(J);Va=i(Nl,"SPAN",{class:!0}),r(Va).forEach(a),Nl.forEach(a),qe=l(ml,"Related Work/Context"),ml.forEach(a),Mt=c(s),ks=i(s,"P",{});var Rl=r(ks);Ja=i(Rl,"STRONG",{});var jl=r(Ja);Ge=l(jl,"Episodic RL"),jl.forEach(a),Rl.forEach(a),_t=c(s),T=i(s,"P",{});var us=r(T);Be=l(us,`This is not the first time RL researchers have tried using past trajectories to improve a policy’s performance outside of training.
The general family of techniques is called `),Xa=i(us,"EM",{});var Sl=r(Xa);Fe=l(Sl,"episodic RL"),Sl.forEach(a),We=l(us,`, named after episodic memory from cognitive psychology.
The papers `),gs=i(us,"A",{href:!0,rel:!0});var Il=r(gs);De=l(Il,"“Model Free Episodic Control”"),Il.forEach(a),Oe=l(us," and "),fs=i(us,"A",{href:!0,rel:!0});var Hl=r(fs);Ce=l(Hl,"“Neural Episodic Control”"),Hl.forEach(a),Qe=l(us," both explore these ideas."),us.forEach(a),Et=c(s),Ms=i(s,"P",{});var ql=r(Ms);Ze=l(ql,`Traditionally, you query previously seen trajectories by their similar to the current state, then use a weighted average of the returns to predict the current return.
It’s a bit like model-based tree search, except instead of simulating future trajectories to estimate action returns, you take previously seen trajectories and use their returns to estimate action returns.`),ql.forEach(a),zt=c(s),X=i(s,"P",{});var xe=r(X);Ke=l(xe,`A big difference between previous episodic RL approaches and this paper is that the approach outlined here allows the agent itself to determine how retrieved information is used.
Rather than directly using the past returns, the agent instead learns to use the `),Ya=i(xe,"EM",{});var Gl=r(Ya);Ue=l(Gl,"information"),Gl.forEach(a),Ve=l(xe," present in retrieved trajectories."),xe.forEach(a),Lt=c(s),_s=i(s,"P",{});var Bl=r(_s);$a=i(Bl,"STRONG",{});var Fl=r($a);Je=l(Fl,"Retrieval Augmented Generation"),Fl.forEach(a),Bl.forEach(a),At=c(s),Y=i(s,"P",{});var ke=r(Y);Xe=l(ke,"The paper also cites the recent trend of "),vs=i(ke,"A",{href:!0,rel:!0});var Wl=r(vs);Ye=l(Wl,"retrieval augmented generation"),Wl.forEach(a),$e=l(ke,` (RAG) as an inspiration.
If you’re reading this post, chances are, you probably already know what RAG is.
For completeness, the quick version of it is that a system (usually some kind of chatbot) receives a query, retrieves the most relevant passages for that query, then passes in both the query and retrieved passages to a language model to generate the final answer.
Because of that retrieval step, not only does the language model not have to memorize a ton of information, but responses also tend to be more factually accurate.`),ke.forEach(a),Tt=c(s),R=i(s,"P",{});var Wa=r(R);sn=l(Wa,"RAG systems tend to learn to retrieve first (e.g. by training a retrieval model on "),ws=i(Wa,"A",{href:!0,rel:!0});var Dl=r(ws);an=l(Dl,"MS MARCO"),Dl.forEach(a),tn=l(Wa,"), "),st=i(Wa,"EM",{});var Ol=r(st);en=l(Ol,"then"),Ol.forEach(a),nn=l(Wa,` learn to generate responses based on that information.
In contrast, this paper learns both how to retrieve and how to act at the same time, which is more difficult, but also more interesting.`),Wa.forEach(a),Pt=c(s),$=i(s,"H2",{id:!0});var ol=r($);ss=i(ol,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cl=r(ss);at=i(Cl,"SPAN",{class:!0}),r(at).forEach(a),Cl.forEach(a),ln=l(ol,"The Approach"),ol.forEach(a),Nt=c(s),Es=i(s,"P",{});var Ql=r(Es);rn=l(Ql,"Let’s construct this system, piece by piece."),Ql.forEach(a),Rt=c(s),f=i(s,"P",{});var L=r(f);pn=l(L,"A DQN takes in a state "),zs=i(L,"SPAN",{class:!0});var xp=r(zs);xp.forEach(a),mn=l(L," and outputs the expected return for each action, "),Ls=i(L,"SPAN",{class:!0});var kp=r(Ls);kp.forEach(a),on=l(L,`.
The paper slightly modifies this and adds an encoder, which converts input/observation `),As=i(L,"SPAN",{class:!0});var Mp=r(As);Mp.forEach(a),hn=l(L," into "),tt=i(L,"EM",{});var Zl=r(tt);cn=l(Zl,"internal"),Zl.forEach(a),un=l(L," state "),Ts=i(L,"SPAN",{class:!0});var _p=r(Ts);_p.forEach(a),dn=l(L,`.
The encoder can be anything appropriate for processing the input, for instance, a ResNet for images.
This setup forms the `),et=i(L,"EM",{});var Kl=r(et);gn=l(Kl,"agent process"),Kl.forEach(a),fn=l(L,"."),L.forEach(a),jt=c(s),as=i(s,"IMG",{src:!0,alt:!0,class:!0}),St=c(s),k=i(s,"P",{});var H=r(k);vn=l(H,`Next, we need something for the agent to retrieve from.
The paper describes `),Ps=i(H,"SPAN",{class:!0});var Ep=r(Ps);Ep.forEach(a),wn=l(H,", a dataset of "),Ns=i(H,"SPAN",{class:!0});var zp=r(Ns);zp.forEach(a),yn=l(H,"-step trajectories, where "),Rs=i(H,"SPAN",{class:!0});var Lp=r(Rs);Lp.forEach(a),bn=l(H,` is at least 1.
Each trajectory consists of input, action, and reward tuples, similar to the makeup of an experience buffer.
I’ll be calling these tuples `),nt=i(H,"EM",{});var Ul=r(nt);xn=l(Ul,"transitions"),Ul.forEach(a),kn=l(H," throughout the post, even though I’m abusing the terminology a little."),H.forEach(a),It=c(s),js=i(s,"P",{});var Vl=r(js);Mn=l(Vl,"Oddly, the action and reward in each transition doesn’t seem to actually be used, at least from their description of the algorithm."),Vl.forEach(a),Ht=c(s),ts=i(s,"IMG",{src:!0,alt:!0,class:!0}),qt=c(s),y=i(s,"P",{});var P=r(y);_n=l(P,`We need another process to actually perform retrieval.
This process is a recurrent network that takes in the current (internal) state `),Ss=i(P,"SPAN",{class:!0});var Ap=r(Ss);Ap.forEach(a),En=l(P,", does a round of retrieval, and outputs a summary of the items it retrieved in the form of "),Is=i(P,"SPAN",{class:!0});var Tp=r(Is);Tp.forEach(a),zn=l(P,`.
`),Hs=i(P,"SPAN",{class:!0});var Pp=r(Hs);Pp.forEach(a),Ln=l(P,` is sent to the agent process, causing its actions to be conditioned on both the state and retrieved items.
The network also updates its hidden state `),qs=i(P,"SPAN",{class:!0});var Np=r(qs);Np.forEach(a),An=l(P,`, allowing information from previous rounds of retrieval to impact future retrievals.
This whole process forms the `),it=i(P,"EM",{});var Jl=r(it);Tn=l(Jl,"retrieval process"),Jl.forEach(a),Pn=l(P,"."),P.forEach(a),Gt=c(s),es=i(s,"IMG",{src:!0,alt:!0,class:!0}),Bt=c(s),Gs=i(s,"P",{});var Xl=r(Gs);Nn=l(Xl,"Let’s dive deeper into the retrieval process."),Xl.forEach(a),Ft=c(s),M=i(s,"P",{});var q=r(M);Rn=l(q,"We’ll start by assuming the agent process has already encoded some input "),Bs=i(q,"SPAN",{class:!0});var Rp=r(Bs);Rp.forEach(a),jn=l(q," as "),Fs=i(q,"SPAN",{class:!0});var jp=r(Fs);jp.forEach(a),Sn=l(q,` and passed it to the retrieval process.
Retrieval starts by uniformly sampling trajectories from our dataset, forming a sample batch.
As previously discussed, each trajectory consists of `),Ws=i(q,"SPAN",{class:!0});var Sp=r(Ws);Sp.forEach(a),In=l(q," tuples of the form "),Ds=i(q,"SPAN",{class:!0});var Ip=r(Ds);Ip.forEach(a),Hn=l(q," (i.e. (input, action, reward))."),q.forEach(a),Wt=c(s),u=i(s,"P",{});var w=r(u);qn=l(w,"Before we actually retrieve from this batch, the trajectories are augmented with additional information through the use of "),lt=i(w,"EM",{});var Yl=r(lt);Gn=l(Yl,"summary functions"),Yl.forEach(a),Bn=l(w,`.
These functions, implemented as RNNs, take in a sequence of encoded inputs, thus we first apply our encoder on all transition inputs to produce `),Os=i(w,"SPAN",{class:!0});var Hp=r(Os);Hp.forEach(a),Fn=l(w,`.
For timestep `),Cs=i(w,"SPAN",{class:!0});var qp=r(Cs);qp.forEach(a),Wn=l(w," in the trajectory, the forward summarizer produces "),Qs=i(w,"SPAN",{class:!0});var Gp=r(Qs);Gp.forEach(a),Dn=l(w," from "),Zs=i(w,"SPAN",{class:!0});var Bp=r(Zs);Bp.forEach(a),On=l(w,`.
The backward summarizer produces `),Ks=i(w,"SPAN",{class:!0});var Fp=r(Ks);Fp.forEach(a),Cn=l(w," from "),Us=i(w,"SPAN",{class:!0});var Wp=r(Us);Wp.forEach(a),Qn=l(w,`, going in the opposite direction.
Once these summarizers are run on each transition, they are of the form `),Vs=i(w,"SPAN",{class:!0});var Dp=r(Vs);Dp.forEach(a),Zn=l(w,"."),w.forEach(a),Dt=c(s),ns=i(s,"IMG",{src:!0,alt:!0,class:!0}),Ot=c(s),Js=i(s,"P",{});var $l=r(Js);Kn=l($l,"At this point, we can actually perform retrieval!"),$l.forEach(a),Ct=c(s),_=i(s,"P",{});var G=r(_);Un=l(G,"Previously, we mentioned that our recurrent retrieval model updates an internal state "),Xs=i(G,"SPAN",{class:!0});var Op=r(Xs);Op.forEach(a),Vn=l(G,` on each timestep.
`),Ys=i(G,"SPAN",{class:!0});var Cp=r(Ys);Cp.forEach(a),Jn=l(G," is not a single vector, but rather a "),rt=i(G,"EM",{});var sr=r(rt);Xn=l(sr,"series"),sr.forEach(a),Yn=l(G," of vectors we call "),pt=i(G,"EM",{});var ar=r(pt);$n=l(ar,"memory slots"),ar.forEach(a),si=l(G,"."),G.forEach(a),Qt=c(s),v=i(s,"P",{});var A=r(v);ai=l(A,"For each slot "),$s=i(A,"SPAN",{class:!0});var Qp=r($s);Qp.forEach(a),ti=l(A,", we use a GRU to generate a prestate "),sa=i(A,"SPAN",{class:!0});var Zp=r(sa);Zp.forEach(a),ei=l(A,", using the previous retrieval state "),aa=i(A,"SPAN",{class:!0});var Kp=r(aa);Kp.forEach(a),ni=l(A," and the current agent state "),ta=i(A,"SPAN",{class:!0});var Up=r(ta);Up.forEach(a),ii=l(A,` as inputs.
These prestates are used to compute a query for each slot by simply running them through another network `),ea=i(A,"SPAN",{class:!0});var Vp=r(ea);Vp.forEach(a),li=l(A," to produce "),na=i(A,"SPAN",{class:!0});var Jp=r(na);Jp.forEach(a),ri=l(A,"."),A.forEach(a),Zt=c(s),is=i(s,"IMG",{src:!0,alt:!0,class:!0}),Kt=c(s),E=i(s,"P",{});var B=r(E);pi=l(B,"We compute keys by linearly projecting each forward summary "),ia=i(B,"SPAN",{class:!0});var Xp=r(ia);Xp.forEach(a),mi=l(B,", forming keys "),la=i(B,"SPAN",{class:!0});var Yp=r(la);Yp.forEach(a),oi=l(B,", where "),ra=i(B,"SPAN",{class:!0});var $p=r(ra);$p.forEach(a),hi=l(B," is the trajectory and "),pa=i(B,"SPAN",{class:!0});var sm=r(pa);sm.forEach(a),ci=l(B," is the timestep within the trajectory."),B.forEach(a),Ut=c(s),ls=i(s,"IMG",{src:!0,alt:!0,class:!0}),Vt=c(s),rs=i(s,"IMG",{src:!0,alt:!0,class:!0}),Jt=c(s),j=i(s,"P",{});var Da=r(j);ui=l(Da,`Each transition is scored by applying the scaled dot product between each key and query to produce a logit, then using softmax on the logits to compute attention weights.
For those unfamiliar, `),ma=i(Da,"SPAN",{class:!0});var am=r(ma);am.forEach(a),di=l(Da," is just the dimensionality of "),oa=i(Da,"SPAN",{class:!0});var tm=r(oa);tm.forEach(a),gi=l(Da,"."),Da.forEach(a),Xt=c(s),ps=i(s,"IMG",{src:!0,alt:!0,class:!0}),Yt=c(s),ha=i(s,"P",{});var tr=r(ha);fi=l(tr,"Each trajectory can now be scored by summing the scores of each of its constituent transitions."),tr.forEach(a),$t=c(s),ms=i(s,"IMG",{src:!0,alt:!0,class:!0}),se=c(s),z=i(s,"P",{});var F=r(z);vi=l(F,`We select the top-k highest trajectories for each memory slot.
The transition scores are renormalized to account for the smaller set, i.e. the softmax is reapplied to the logits of our top-k trajectories’ transitions.
Then, we compute the value of the slot by multiplying the `),mt=i(F,"EM",{});var er=r(mt);wi=l(er,"backward"),er.forEach(a),yi=l(F," summary ("),ca=i(F,"SPAN",{class:!0});var em=r(ca);em.forEach(a),bi=l(F,") of each transition with a weight matrix (similar to the keys), multiplying "),ot=i(F,"EM",{});var nr=r(ot);xi=l(nr,"that"),nr.forEach(a),ki=l(F," with the renormalized scores, then summing up these vectors, producing "),ua=i(F,"SPAN",{class:!0});var nm=r(ua);nm.forEach(a),Mi=l(F,` for each memory slot.
All in all, this is just cross attention, with the queries as queries, the forward summaries as keys, and the backward summaries as values.`),F.forEach(a),ae=c(s),da=i(s,"P",{});var ir=r(da);_i=l(ir,"At this point, we have a set of values that we’ve retrieved, one for each memory slot."),ir.forEach(a),te=c(s),S=i(s,"P",{});var Oa=r(S);Ei=l(Oa,"The authors parameterize two gaussian distributions — "),ga=i(Oa,"SPAN",{class:!0});var im=r(ga);im.forEach(a),zi=l(Oa,", which is conditioned on the memory slot’s retrieved information, and "),fa=i(Oa,"SPAN",{class:!0});var lm=r(fa);lm.forEach(a),Li=l(Oa,", which is only conditioned on the previous state of the memory slot."),Oa.forEach(a),ee=c(s),d=i(s,"P",{});var b=r(d);Ai=l(b,"It looks like they essentially use the same trick as "),ys=i(b,"A",{href:!0,rel:!0});var lr=r(ys);Ti=l(lr,"variational autoencoders"),lr.forEach(a),Pi=l(b,", where for a given input, a "),va=i(b,"SPAN",{class:!0});var rm=r(va);rm.forEach(a),Ni=l(b,` dimensional vector of means and standard deviations are generated, which are then used to sample values.
`),wa=i(b,"SPAN",{class:!0});var pm=r(wa);pm.forEach(a),Ri=l(b,", sampled from "),ya=i(b,"SPAN",{class:!0});var mm=r(ya);mm.forEach(a),ji=l(b,", is what we’re gonna use to update our slots, but we don’t want it to contain "),ht=i(b,"EM",{});var rr=r(ht);Si=l(rr,"too"),rr.forEach(a),Ii=l(b,` much information.
To accomplish this, the authors perform regularization by minimizing the KL divergence between the distributions generated by `),ba=i(b,"SPAN",{class:!0});var om=r(ba);om.forEach(a),Hi=l(b," and "),xa=i(b,"SPAN",{class:!0});var hm=r(xa);hm.forEach(a),qi=l(b,"."),b.forEach(a),ne=c(s),os=i(s,"IMG",{src:!0,alt:!0,class:!0}),ie=c(s),D=i(s,"P",{});var dt=r(D);ka=i(dt,"SPAN",{class:!0});var cm=r(ka);cm.forEach(a),Gi=l(dt," is then used to update the slots’ representations by adding it to the prestates, "),Ma=i(dt,"SPAN",{class:!0});var um=r(Ma);um.forEach(a),Bi=l(dt,`.
To get the final new representation of each slot, self attention is performed between slots, allowing them to share information.`),dt.forEach(a),le=c(s),g=i(s,"P",{});var x=r(g);Fi=l(x,"Finally, we need to update our state with retrieved information "),_a=i(x,"SPAN",{class:!0});var dm=r(_a);dm.forEach(a),Wi=l(x,`.
A cross attention operation is performed between the state `),Ea=i(x,"SPAN",{class:!0});var gm=r(Ea);gm.forEach(a),Di=l(x," and "),za=i(x,"SPAN",{class:!0});var fm=r(za);fm.forEach(a),Oi=l(x,`.
`),La=i(x,"SPAN",{class:!0});var vm=r(La);vm.forEach(a),Ci=l(x," is used to compute the query, while "),Aa=i(x,"SPAN",{class:!0});var wm=r(Aa);wm.forEach(a),Qi=l(x,` is used to compute the keys and values (i.e. via linear projection).
The resulting value, `),Ta=i(x,"SPAN",{class:!0});var ym=r(Ta);ym.forEach(a),Zi=l(x,", is added to "),Pa=i(x,"SPAN",{class:!0});var bm=r(Pa);bm.forEach(a),Ki=l(x,", which is then passed to the agent so it can act upon it."),x.forEach(a),re=c(s),hs=i(s,"H2",{id:!0});var hl=r(hs);cs=i(hl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var pr=r(cs);ct=i(pr,"SPAN",{class:!0}),r(ct).forEach(a),pr.forEach(a),Ui=l(hl,"Conclusion"),hl.forEach(a),pe=c(s),Na=i(s,"P",{});var mr=r(Na);Vi=l(mr,`The big strength of the approach outlined here is that compared to a lot of episodic RL approaches, you’re being less prescriptive about the relevance criteria and how retrieved information is used.
Instead of scoring past trajectories by state similarity, the networks themselves learn to retrieve and act upon the retrieved information.`),mr.forEach(a),me=c(s),Ra=i(s,"P",{});var or=r(Ra);Ji=l(or,`In terms of the paper itself, I also found the experiments and ablations the authors performed to be thorough.
They tested RARL on three tasks — Atari, Gridroboman, and BabyAI.`),or.forEach(a),oe=c(s),ja=i(s,"P",{});var hr=r(ja);Xi=l(hr,"On Atari, they showed that RARL agents show performance gains over a standard R2D2 setup. Some of these performance gains were particularly big, such as on Frostbite, where they saw a ~200% improvement."),hr.forEach(a),he=c(s),Sa=i(s,"P",{});var cr=r(Sa);Yi=l(cr,"On Gridroboman (a multi-task, fully observable gridworld environment where an agent must complete various tasks involving picking up and putting down boxes), they showed that RARL agents can be trained on multiple tasks and are able to disambiguate tasks based on the retrieval dataset provided."),cr.forEach(a),ce=c(s),Ia=i(s,"P",{});var ur=r(Ia);$i=l(ur,`Finally, on BabyAI (a partially observable multi-task gridworld), they showed that even when trajectories from all tasks are provided in the retrieval dataset, RARL agents still improve over baseline R2D2 agents.
This is in part chalked up to RARL being able to retrieve data from atomic tasks in order to solve more compositional tasks.`),ur.forEach(a),ue=c(s),Ha=i(s,"P",{});var dr=r(Ha);sl=l(dr,"While I think this is an important paper for people studying the intersection of information retrieval and reinforcement learning, I do think there are a couple of issues, some personal."),dr.forEach(a),de=c(s),qa=i(s,"P",{});var gr=r(qa);al=l(gr,"First, I would have preferred not R2D2 at all. I feel like memory-based agents overlap with retrieval-based agents in function, and using something like a DQN would have made the results more clear, particularly for Atari. I do appreciate that Gridroboman used just a DQN for this reason."),gr.forEach(a),ge=c(s),Ga=i(s,"P",{});var fr=r(Ga);tl=l(fr,"Similarly, I’m not a big fan of how the retrieval process is an RNN whose state is dependent on prior retrievals. It makes the proposed approach less clean; I would have preferred a more straightforward mapping of current states to previous trajectories."),fr.forEach(a),fe=c(s),Ba=i(s,"P",{});var vr=r(Ba);el=l(vr,`Finally, while the approach outlined here does improve over baseline DQN and R2D2 agents, this is more akin to attention over past trajectories rather than true retrieval.
To make the problem tractable, the authors uniformly sample from the full retrieval dataset, but I suspect this leads to poor recall and final performance if the ratio of relevant trajectories to irrelevant trajectories is very small.
This kind of relevance ratio is standard for most retrieval problems — for example, the dev set of MS MARCO designates one passage out of 8.8 million as relevant.`),vr.forEach(a),ve=c(s),I=i(s,"P",{});var Ca=r(I);nl=l(Ca,"Additionally, rather than ranking individual trajectories, this approach operates on an entire "),ut=i(Ca,"EM",{});var wr=r(ut);il=l(wr,"batch"),wr.forEach(a),ll=l(Ca," of retrieved information (you have different slots, and each slot queries its own top-k set of trajectories, allowing the network to integerate data from "),Fa=i(Ca,"SPAN",{class:!0});var xm=r(Fa);xm.forEach(a),rl=l(Ca,` number of trajectories).
Ideally, the approach should work even when using 1 slot and greedily selecting the best piece of information.`),Ca.forEach(a),this.h()},h(){p(ds,"href","https://arxiv.org/abs/2202.08417"),p(ds,"rel","nofollow"),p(Qa,"class","icon icon-link"),p(C,"aria-hidden","true"),p(C,"tabindex","-1"),p(C,"href","#motivation"),p(O,"id","motivation"),N(Z.src,ul="/images/blog/rarl/goomba.png")||p(Z,"src",ul),p(Z,"alt","mario"),p(Z,"class","post-img-lg"),p(Va,"class","icon icon-link"),p(J,"aria-hidden","true"),p(J,"tabindex","-1"),p(J,"href","#related-workcontext"),p(V,"id","related-workcontext"),p(gs,"href","https://arxiv.org/abs/1606.04460"),p(gs,"rel","nofollow"),p(fs,"href","https://arxiv.org/abs/1703.01988"),p(fs,"rel","nofollow"),p(vs,"href","https://arxiv.org/abs/2005.11401"),p(vs,"rel","nofollow"),p(ws,"href","https://microsoft.github.io/msmarco/"),p(ws,"rel","nofollow"),p(at,"class","icon icon-link"),p(ss,"aria-hidden","true"),p(ss,"tabindex","-1"),p(ss,"href","#the-approach"),p($,"id","the-approach"),p(zs,"class","math math-inline"),p(Ls,"class","math math-inline"),p(As,"class","math math-inline"),p(Ts,"class","math math-inline"),N(as.src,dl="/images/blog/rarl/1.png")||p(as,"src",dl),p(as,"alt","agent process"),p(as,"class","post-img-lg"),p(Ps,"class","math math-inline"),p(Ns,"class","math math-inline"),p(Rs,"class","math math-inline"),N(ts.src,gl="/images/blog/rarl/2.png")||p(ts,"src",gl),p(ts,"alt","dataset"),p(ts,"class","post-img-lg"),p(Ss,"class","math math-inline"),p(Is,"class","math math-inline"),p(Hs,"class","math math-inline"),p(qs,"class","math math-inline"),N(es.src,fl="/images/blog/rarl/3.png")||p(es,"src",fl),p(es,"alt","retrieval process"),p(es,"class","post-img-lg"),p(Bs,"class","math math-inline"),p(Fs,"class","math math-inline"),p(Ws,"class","math math-inline"),p(Ds,"class","math math-inline"),p(Os,"class","math math-inline"),p(Cs,"class","math math-inline"),p(Qs,"class","math math-inline"),p(Zs,"class","math math-inline"),p(Ks,"class","math math-inline"),p(Us,"class","math math-inline"),p(Vs,"class","math math-inline"),N(ns.src,vl="/images/blog/rarl/4.png")||p(ns,"src",vl),p(ns,"alt","summarizers"),p(ns,"class","post-img-lg"),p(Xs,"class","math math-inline"),p(Ys,"class","math math-inline"),p($s,"class","math math-inline"),p(sa,"class","math math-inline"),p(aa,"class","math math-inline"),p(ta,"class","math math-inline"),p(ea,"class","math math-inline"),p(na,"class","math math-inline"),N(is.src,wl="/images/blog/rarl/5.png")||p(is,"src",wl),p(is,"alt","prestates"),p(is,"class","post-img-lg"),p(ia,"class","math math-inline"),p(la,"class","math math-inline"),p(ra,"class","math math-inline"),p(pa,"class","math math-inline"),N(ls.src,yl="/images/blog/rarl/6.png")||p(ls,"src",yl),p(ls,"alt","scoring1"),p(ls,"class","post-img-lg"),N(rs.src,bl="/images/blog/rarl/7.png")||p(rs,"src",bl),p(rs,"alt","scoring2"),p(rs,"class","post-img-lg"),p(ma,"class","math math-inline"),p(oa,"class","math math-inline"),N(ps.src,xl="/images/blog/rarl/8.png")||p(ps,"src",xl),p(ps,"alt","scoring3"),p(ps,"class","post-img-lg"),N(ms.src,kl="/images/blog/rarl/9.png")||p(ms,"src",kl),p(ms,"alt","scoring4"),p(ms,"class","post-img-lg"),p(ca,"class","math math-inline"),p(ua,"class","math math-inline"),p(ga,"class","math math-inline"),p(fa,"class","math math-inline"),p(ys,"href","https://en.wikipedia.org/wiki/Variational_autoencoder"),p(ys,"rel","nofollow"),p(va,"class","math math-inline"),p(wa,"class","math math-inline"),p(ya,"class","math math-inline"),p(ba,"class","math math-inline"),p(xa,"class","math math-inline"),N(os.src,Ml="/images/blog/rarl/10.png")||p(os,"src",Ml),p(os,"alt","scoring5"),p(os,"class","post-img-lg"),p(ka,"class","math math-inline"),p(Ma,"class","math math-inline"),p(_a,"class","math math-inline"),p(Ea,"class","math math-inline"),p(za,"class","math math-inline"),p(La,"class","math math-inline"),p(Aa,"class","math math-inline"),p(Ta,"class","math math-inline"),p(Pa,"class","math math-inline"),p(ct,"class","icon icon-link"),p(cs,"aria-hidden","true"),p(cs,"tabindex","-1"),p(cs,"href","#conclusion"),p(hs,"id","conclusion"),p(Fa,"class","math math-inline")},m(s,m){o(s,W,m),t(W,ds),t(ds,Me),t(W,_e),o(s,gt,m),o(s,O,m),t(O,C),t(C,Qa),t(O,Ee),o(s,ft,m),o(s,Q,m),t(Q,ze),t(Q,Za),t(Za,Le),t(Q,Ae),o(s,vt,m),o(s,bs,m),t(bs,Te),o(s,wt,m),o(s,Z,m),o(s,yt,m),o(s,xs,m),t(xs,Pe),o(s,bt,m),o(s,K,m),t(K,Ne),t(K,Ka),t(Ka,Re),t(K,je),o(s,xt,m),o(s,U,m),t(U,Se),t(U,Ua),t(Ua,Ie),t(U,He),o(s,kt,m),o(s,V,m),t(V,J),t(J,Va),t(V,qe),o(s,Mt,m),o(s,ks,m),t(ks,Ja),t(Ja,Ge),o(s,_t,m),o(s,T,m),t(T,Be),t(T,Xa),t(Xa,Fe),t(T,We),t(T,gs),t(gs,De),t(T,Oe),t(T,fs),t(fs,Ce),t(T,Qe),o(s,Et,m),o(s,Ms,m),t(Ms,Ze),o(s,zt,m),o(s,X,m),t(X,Ke),t(X,Ya),t(Ya,Ue),t(X,Ve),o(s,Lt,m),o(s,_s,m),t(_s,$a),t($a,Je),o(s,At,m),o(s,Y,m),t(Y,Xe),t(Y,vs),t(vs,Ye),t(Y,$e),o(s,Tt,m),o(s,R,m),t(R,sn),t(R,ws),t(ws,an),t(R,tn),t(R,st),t(st,en),t(R,nn),o(s,Pt,m),o(s,$,m),t($,ss),t(ss,at),t($,ln),o(s,Nt,m),o(s,Es,m),t(Es,rn),o(s,Rt,m),o(s,f,m),t(f,pn),t(f,zs),zs.innerHTML=br,t(f,mn),t(f,Ls),Ls.innerHTML=xr,t(f,on),t(f,As),As.innerHTML=kr,t(f,hn),t(f,tt),t(tt,cn),t(f,un),t(f,Ts),Ts.innerHTML=Mr,t(f,dn),t(f,et),t(et,gn),t(f,fn),o(s,jt,m),o(s,as,m),o(s,St,m),o(s,k,m),t(k,vn),t(k,Ps),Ps.innerHTML=_r,t(k,wn),t(k,Ns),Ns.innerHTML=Er,t(k,yn),t(k,Rs),Rs.innerHTML=zr,t(k,bn),t(k,nt),t(nt,xn),t(k,kn),o(s,It,m),o(s,js,m),t(js,Mn),o(s,Ht,m),o(s,ts,m),o(s,qt,m),o(s,y,m),t(y,_n),t(y,Ss),Ss.innerHTML=Lr,t(y,En),t(y,Is),Is.innerHTML=Ar,t(y,zn),t(y,Hs),Hs.innerHTML=Tr,t(y,Ln),t(y,qs),qs.innerHTML=Pr,t(y,An),t(y,it),t(it,Tn),t(y,Pn),o(s,Gt,m),o(s,es,m),o(s,Bt,m),o(s,Gs,m),t(Gs,Nn),o(s,Ft,m),o(s,M,m),t(M,Rn),t(M,Bs),Bs.innerHTML=Nr,t(M,jn),t(M,Fs),Fs.innerHTML=Rr,t(M,Sn),t(M,Ws),Ws.innerHTML=jr,t(M,In),t(M,Ds),Ds.innerHTML=Sr,t(M,Hn),o(s,Wt,m),o(s,u,m),t(u,qn),t(u,lt),t(lt,Gn),t(u,Bn),t(u,Os),Os.innerHTML=Ir,t(u,Fn),t(u,Cs),Cs.innerHTML=Hr,t(u,Wn),t(u,Qs),Qs.innerHTML=qr,t(u,Dn),t(u,Zs),Zs.innerHTML=Gr,t(u,On),t(u,Ks),Ks.innerHTML=Br,t(u,Cn),t(u,Us),Us.innerHTML=Fr,t(u,Qn),t(u,Vs),Vs.innerHTML=Wr,t(u,Zn),o(s,Dt,m),o(s,ns,m),o(s,Ot,m),o(s,Js,m),t(Js,Kn),o(s,Ct,m),o(s,_,m),t(_,Un),t(_,Xs),Xs.innerHTML=Dr,t(_,Vn),t(_,Ys),Ys.innerHTML=Or,t(_,Jn),t(_,rt),t(rt,Xn),t(_,Yn),t(_,pt),t(pt,$n),t(_,si),o(s,Qt,m),o(s,v,m),t(v,ai),t(v,$s),$s.innerHTML=Cr,t(v,ti),t(v,sa),sa.innerHTML=Qr,t(v,ei),t(v,aa),aa.innerHTML=Zr,t(v,ni),t(v,ta),ta.innerHTML=Kr,t(v,ii),t(v,ea),ea.innerHTML=Ur,t(v,li),t(v,na),na.innerHTML=Vr,t(v,ri),o(s,Zt,m),o(s,is,m),o(s,Kt,m),o(s,E,m),t(E,pi),t(E,ia),ia.innerHTML=Jr,t(E,mi),t(E,la),la.innerHTML=Xr,t(E,oi),t(E,ra),ra.innerHTML=Yr,t(E,hi),t(E,pa),pa.innerHTML=$r,t(E,ci),o(s,Ut,m),o(s,ls,m),o(s,Vt,m),o(s,rs,m),o(s,Jt,m),o(s,j,m),t(j,ui),t(j,ma),ma.innerHTML=sp,t(j,di),t(j,oa),oa.innerHTML=ap,t(j,gi),o(s,Xt,m),o(s,ps,m),o(s,Yt,m),o(s,ha,m),t(ha,fi),o(s,$t,m),o(s,ms,m),o(s,se,m),o(s,z,m),t(z,vi),t(z,mt),t(mt,wi),t(z,yi),t(z,ca),ca.innerHTML=tp,t(z,bi),t(z,ot),t(ot,xi),t(z,ki),t(z,ua),ua.innerHTML=ep,t(z,Mi),o(s,ae,m),o(s,da,m),t(da,_i),o(s,te,m),o(s,S,m),t(S,Ei),t(S,ga),ga.innerHTML=np,t(S,zi),t(S,fa),fa.innerHTML=ip,t(S,Li),o(s,ee,m),o(s,d,m),t(d,Ai),t(d,ys),t(ys,Ti),t(d,Pi),t(d,va),va.innerHTML=lp,t(d,Ni),t(d,wa),wa.innerHTML=rp,t(d,Ri),t(d,ya),ya.innerHTML=pp,t(d,ji),t(d,ht),t(ht,Si),t(d,Ii),t(d,ba),ba.innerHTML=mp,t(d,Hi),t(d,xa),xa.innerHTML=op,t(d,qi),o(s,ne,m),o(s,os,m),o(s,ie,m),o(s,D,m),t(D,ka),ka.innerHTML=hp,t(D,Gi),t(D,Ma),Ma.innerHTML=cp,t(D,Bi),o(s,le,m),o(s,g,m),t(g,Fi),t(g,_a),_a.innerHTML=up,t(g,Wi),t(g,Ea),Ea.innerHTML=dp,t(g,Di),t(g,za),za.innerHTML=gp,t(g,Oi),t(g,La),La.innerHTML=fp,t(g,Ci),t(g,Aa),Aa.innerHTML=vp,t(g,Qi),t(g,Ta),Ta.innerHTML=wp,t(g,Zi),t(g,Pa),Pa.innerHTML=yp,t(g,Ki),o(s,re,m),o(s,hs,m),t(hs,cs),t(cs,ct),t(hs,Ui),o(s,pe,m),o(s,Na,m),t(Na,Vi),o(s,me,m),o(s,Ra,m),t(Ra,Ji),o(s,oe,m),o(s,ja,m),t(ja,Xi),o(s,he,m),o(s,Sa,m),t(Sa,Yi),o(s,ce,m),o(s,Ia,m),t(Ia,$i),o(s,ue,m),o(s,Ha,m),t(Ha,sl),o(s,de,m),o(s,qa,m),t(qa,al),o(s,ge,m),o(s,Ga,m),t(Ga,tl),o(s,fe,m),o(s,Ba,m),t(Ba,el),o(s,ve,m),o(s,I,m),t(I,nl),t(I,ut),t(ut,il),t(I,ll),t(I,Fa),Fa.innerHTML=bp,t(I,rl)},p:cl,i:cl,o:cl,d(s){s&&a(W),s&&a(gt),s&&a(O),s&&a(ft),s&&a(Q),s&&a(vt),s&&a(bs),s&&a(wt),s&&a(Z),s&&a(yt),s&&a(xs),s&&a(bt),s&&a(K),s&&a(xt),s&&a(U),s&&a(kt),s&&a(V),s&&a(Mt),s&&a(ks),s&&a(_t),s&&a(T),s&&a(Et),s&&a(Ms),s&&a(zt),s&&a(X),s&&a(Lt),s&&a(_s),s&&a(At),s&&a(Y),s&&a(Tt),s&&a(R),s&&a(Pt),s&&a($),s&&a(Nt),s&&a(Es),s&&a(Rt),s&&a(f),s&&a(jt),s&&a(as),s&&a(St),s&&a(k),s&&a(It),s&&a(js),s&&a(Ht),s&&a(ts),s&&a(qt),s&&a(y),s&&a(Gt),s&&a(es),s&&a(Bt),s&&a(Gs),s&&a(Ft),s&&a(M),s&&a(Wt),s&&a(u),s&&a(Dt),s&&a(ns),s&&a(Ot),s&&a(Js),s&&a(Ct),s&&a(_),s&&a(Qt),s&&a(v),s&&a(Zt),s&&a(is),s&&a(Kt),s&&a(E),s&&a(Ut),s&&a(ls),s&&a(Vt),s&&a(rs),s&&a(Jt),s&&a(j),s&&a(Xt),s&&a(ps),s&&a(Yt),s&&a(ha),s&&a($t),s&&a(ms),s&&a(se),s&&a(z),s&&a(ae),s&&a(da),s&&a(te),s&&a(S),s&&a(ee),s&&a(d),s&&a(ne),s&&a(os),s&&a(ie),s&&a(D),s&&a(le),s&&a(g),s&&a(re),s&&a(hs),s&&a(pe),s&&a(Na),s&&a(me),s&&a(Ra),s&&a(oe),s&&a(ja),s&&a(he),s&&a(Sa),s&&a(ce),s&&a(Ia),s&&a(ue),s&&a(Ha),s&&a(de),s&&a(qa),s&&a(ge),s&&a(Ga),s&&a(fe),s&&a(Ba),s&&a(ve),s&&a(I)}}}const Lm={title:'Notes on "Retrieval Augmented Reinforcement Learning"',date:"2024-06-24",updated:"2024-06-24",categories:["papers","reinforcement-learning"],coverImage:"/images/blog/rarl/3.png",coverWidth:15,coverHeight:8,excerpt:'Notes on "Retrieval Augmented Reinforcement Learning", which describes how agents can learn to retrieve relevant past trajectories to improve agent performance.'};class Am extends km{constructor(W){super(),Mm(this,W,null,Em,_m,{})}}export{Am as default,Lm as metadata};
